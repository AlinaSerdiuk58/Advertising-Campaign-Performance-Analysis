CREATE OR REPLACE FUNCTION pg_temp.decode_url_part(p varchar) RETURNS varchar AS $$
select
  convert_from(CAST(E'\\x' || string_agg(CASE WHEN length(r.m[1]) = 1 THEN encode(convert_to(r.m[1], 'SQL_ASCII'), 'hex') ELSE substring(r.m[1] from 2 for 2) END, '') AS bytea), 'UTF8')
FROM regexp_matches($1, '%[0-9a-f][0-9a-f]|.', 'gi') AS r(m);
$$ LANGUAGE SQL IMMUTABLE strict;
with common_table as(
select 
	ad_date,
	'Facebook Ads' as media_source,
	fc.campaign_name ,
	fa.adset_name ,
	coalesce (spend,0) as spend,
	coalesce (impressions,0) as impressions,
	coalesce (reach,0) as reach,
	coalesce (clicks,0) as clicks,
	coalesce (leads,0) as leads,
	coalesce (value  ,0) as value ,
	url_parameters
from facebook_ads_basic_daily fabd 
left join facebook_campaign fc on fabd.campaign_id =fc.campaign_id 
left join facebook_adset fa on fabd.adset_id =fa.adset_id 
where ad_date is not null 
union all 
select 
	ad_date,
	'Google Ads' as media_source,
	campaign_name ,
	adset_name,
	coalesce (spend,0) as spend,
	coalesce (impressions,0) as impressions,
	coalesce (reach,0) as reach,
	coalesce (clicks,0) as clicks,
	coalesce (leads,0) as leads,
	coalesce (value  ,0) as value ,
	url_parameters
from google_ads_basic_daily gabd 
)
select  
  	ad_date,
	case
		when lower(substring(url_parameters, 'utm_campaign=([^\&]+)')) != 'nan' 
					then lower(substring(decode_url_part(url_parameters) , 'utm_campaign=([^\&]+)'))
	end as utm_campaign_fixed,
	sum(spend)  as total_spend,
    sum(impressions) as total_impressions,
    sum(clicks) as total_clicks,
    sum(value) as total_value,
  case when sum(impressions)>0 then round(sum(clicks)/sum(impressions::numeric)*100 ,2) else 0 end as ctr,
  case when sum(clicks)>0 then round(sum(spend)/sum(clicks::numeric) ,2) else 0 end as cpc,
  case when sum(impressions)>0 then round(sum(spend)/sum(impressions::numeric)*1000 ,2) else 0 end as cpm,
  case when sum(spend)>0 then round(sum(value)-sum(spend)/sum(spend::numeric) ,2) else 0 end as romi
from common_table
group by 1,2
;
